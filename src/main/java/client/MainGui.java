package client;

import common.Resource;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.util.List;
import java.util.function.Consumer;

public class MainGui extends JFrame {

    private JLabel status;
    private JPanel panel;
    private JList<Resource> productList;
    private JLabel ticket;
    private JLabel serving;

    public MainGui() {
        $$$setupUI$$$();
        this.productList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.productList.setLayoutOrientation(JList.HORIZONTAL_WRAP);
        this.productList.setVisibleRowCount(-1);
        this.productList.setFixedCellHeight(25);
        this.status.setBorder(new EmptyBorder(0, 0, 5, 0));
        this.panel.setBorder(new EmptyBorder(15, 15, 15, 15));
        this.serving.setBorder(new EmptyBorder(5, 0, 0, 0));
        this.ticket.setBorder(new EmptyBorder(5, 0, 0, 0));
        setSize(400, 250);
        setTitle("SCM");
        getContentPane().add(this.panel);
        setResizable(false);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    public void setStatusText(String status) {
        this.status.setText("Status: " + status);
    }

    public void setProducts(List<Resource> products) {
        DefaultListModel<Resource> model = new DefaultListModel<>();
        model.addAll(products);
        this.productList.setModel(model);
    }

    // SET LISTENER

    public void setSelectProductAction(Consumer<Resource> consumer) {
        this.productList.addListSelectionListener(e -> {
            if (!this.productList.isSelectionEmpty() && !e.getValueIsAdjusting()) {
                consumer.accept(this.productList.getSelectedValue());
                this.productList.clearSelection();
            }
        });
    }

    // UPDATE UI METHODS
    // TODO refactor

    public void setServingNumber(Integer queueNumber) {
        SwingUtilities.invokeLater(() -> {
            this.serving.setText("Now serving " + queueNumber);
            String text = this.ticket.getText();
            if (Integer.parseInt(text.substring(text.lastIndexOf(" ") + 1)) == queueNumber)
                JOptionPane.showMessageDialog(this, "Your product will be ready shortly.");
        });
    }

    public void showTicket(int ticket) {
        SwingUtilities.invokeLater(() -> this.ticket.setText("Your ticket is " + ticket));
    }

    public void showDialog(String stringToShow) {
        SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(this, stringToShow));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        productList = new JList<>();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.BOTH;
        panel.add(productList, gbc);
        status = new JLabel();
        status.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        panel.add(status, gbc);
        ticket = new JLabel();
        ticket.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        panel.add(ticket, gbc);
        serving = new JLabel();
        serving.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        panel.add(serving, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
